{"changed":true,"filter":false,"title":"common.py","tooltip":"/common_python/common.py","value":"#!/usr/bin/env python\n# coding: utf-8\n\n# In[1]:\n\n\n#!/usr/bin/python3\n# -*- coding: utf-8 -*-\nimport os\nimport requests\nimport csv\nimport pandas as pd\n\nclass Common():\n    \"\"\"\n    @brief : Pythonでよく使用する関数を集めたクラス\n    @note  : \n    \"\"\"\n    line_notify_token = ''\n    discord_webhook_url = ''\n    discord_username = ''\n    slack_webhook_url = ''\n    slack_username = ''\n    \n    def __init__(self):\n\n    def get_csv_val(self, file_name, row, col):\n        \"\"\"\n        @brief : ファイル名と行列を指定してCSVの値を取得\n        @note  : CSVファイルの1行目はカラム名データとなるため、2行目からのデータが取得可能なことに注意\n        \"\"\"\n        if os.path.exists(file_name):\n            csv_input = pd.read_csv(file_name)\n            return csv_input.values[row, col]\n        else:\n            print(file_name + \" が存在しません。\")\n \n    def get_csv_val_by_key(self, file_name, key):\n        \"\"\"\n        @brief : ファイル名とkeyを指定してCSVの値を取得\n        @note  : ファイルに格納されているデータは下記のような形式\n                  name1, key1\n                  name2, key2\n                  ・\n                  ・\n        \"\"\"\n        key_dict = {}\n        with open(file_name, \"r\") as f:\n            reader = csv.reader(f)\n            for row in reader:\n                key_dict[row[0]] = row[1]\n                #print(key_dict)\n        return key_dict[key]\n\n    # ----- LINE, DISCORD, SLACK にメッセージを送るための初期設定 関連----\n    def set_line(token):\n        self.line_notify_token = token\n\n    def set_discord(url, username)\n        self.discord_webhook_url = url\n        self.discord_username = username\n    \n    def set_slack(url, username)\n        self.slack_webhook_url = url\n        self.slack_username = username        \n\n    # ----- Notify（メッセージを送る） 関連-----\n    def send_message(text) :\n        try:\n            __line(text)\n        except:\n            pass\n        try:\n            __discord(text)\n        except:\n            pass\n        try:\n            __slack(text)\n        except:\n            pass\n        \n    def __line(message):\n        if len(self.line_notify_token) > 0:\n            requests.post('https://notify-api.line.me/api/notify', headers={'Authorization': 'Bearer ' + self.line_notify_token}, data={'message': '\\n' + message})\n\n    def __discord(message):\n        if len(self.discord_webhook_url) > 0:\n            requests.post(self.discord_webhook_url, data={'username': self.discord_username, 'content': message})\n\n    def __slack(message):\n        if len(self.slack_webhook_url) > 0:\n            requests.post(self.slack_webhook_url, data=json.dumps({'username': self.slack_username, 'text':message}))\n\n    \n\n","undoManager":{"mark":-2,"position":0,"stack":[[{"start":{"row":30,"column":11},"end":{"row":30,"column":19},"action":"remove","lines":["        "],"id":2}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":38,"column":8},"end":{"row":38,"column":8},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1541520763719}